pipeline {
    agent any
    parameters {
        choice(
            name: 'QualityGate',
            choices: ['Pass', 'Fail'],
            description: 'Select whether to fail the pipeline on quality gate failure'
        )
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('SonarQube Analysis') {
            steps {
                script {
                    def projectName = 'web-devo'
                    def projectKey = 'web-devo'
                    def coverageThreshold = '80'

                    // Ensure that SonarQube environment is set up properly
                    withSonarQubeEnv('QualityGate') { // Use the SonarQube server name configured in Jenkins
                        def scannerHome = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=${projectKey} \
                            -Dsonar.projectName=${projectName} \
                            -Dsonar.sources=web \
                            -Dsonar.host.url=${env.SONAR_HOST_URL} \
                            -Dsonar.language=js \
                            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                        """
                    }
                }
            }
        }

        stage('SonarQube Quality Gate Check') {
            steps {
                script {
                    // This will automatically wait for the quality gate status and abort if the gate fails
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
